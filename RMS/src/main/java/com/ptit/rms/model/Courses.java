package com.ptit.rms.model;
// Generated Jul 11, 2017 9:20:47 AM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Courses generated by hbm2java
 */
@Entity
@Table(name = "courses")
public class Courses {

  private int courseId;
  private User usersByUpdatedBy;
  private User usersByCreatedBy;
  private String courseName;
  private boolean isDeleted;
  private Date createdAt;
  private Date updatedAt;
  private Set<Locations> locationses = new HashSet<Locations>(0);
  private int courseOrder;
  private Date deletedTime;

  public Courses() {
  }

  public Courses(int courseId, User usersByUpdatedBy, User usersByCreatedBy, String courseName, boolean isDeleted, Date createdAt, Date updatedAt,
      Set<Locations> locationses, int courseOrder, Date deletedTime) {
    super();
    this.courseId = courseId;
    this.usersByUpdatedBy = usersByUpdatedBy;
    this.usersByCreatedBy = usersByCreatedBy;
    this.courseName = courseName;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.locationses = locationses;
    this.courseOrder = courseOrder;
    this.deletedTime = deletedTime;
  }

  public Courses(int courseId, User usersByUpdatedBy, User usersByCreatedBy, String courseName, boolean isDeleted, Date createdAt, Date updatedAt) {
    this.courseId = courseId;
    this.usersByUpdatedBy = usersByUpdatedBy;
    this.usersByCreatedBy = usersByCreatedBy;
    this.courseName = courseName;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public Courses(int courseId, User usersByUpdatedBy, User usersByCreatedBy, String courseName, boolean isDeleted, Date createdAt, Date updatedAt,
      Set<Locations> locationses) {
    this.courseId = courseId;
    this.usersByUpdatedBy = usersByUpdatedBy;
    this.usersByCreatedBy = usersByCreatedBy;
    this.courseName = courseName;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.locationses = locationses;
  }

  public Courses(int courseId, User usersByUpdatedBy, User usersByCreatedBy, String courseName, boolean isDeleted, Date createdAt, Date updatedAt,
      Set<Locations> locationses, int courseOrder) {
    super();
    this.courseId = courseId;
    this.usersByUpdatedBy = usersByUpdatedBy;
    this.usersByCreatedBy = usersByCreatedBy;
    this.courseName = courseName;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.locationses = locationses;
    this.courseOrder = courseOrder;
  }

  @Id

  @Column(name = "course_id", unique = true, nullable = false)
  public int getCourseId() {
    return this.courseId;
  }

  public void setCourseId(int courseId) {
    this.courseId = courseId;
  }

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "updated_by", nullable = false)
  public User getUsersByUpdatedBy() {
    return this.usersByUpdatedBy;
  }

  public void setUsersByUpdatedBy(User usersByUpdatedBy) {
    this.usersByUpdatedBy = usersByUpdatedBy;
  }

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "created_by", nullable = false)
  public User getUsersByCreatedBy() {
    return this.usersByCreatedBy;
  }

  public void setUsersByCreatedBy(User usersByCreatedBy) {
    this.usersByCreatedBy = usersByCreatedBy;
  }

  @Column(name = "course_name", nullable = false)
  public String getCourseName() {
    return this.courseName;
  }

  public void setCourseName(String courseName) {
    this.courseName = courseName;
  }

  @Column(name = "is_deleted", nullable = false)
  public boolean getIsDeleted() {
    return this.isDeleted;
  }

  public void setIsDeleted(boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "created_at", nullable = false, length = 23)
  public Date getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "updated_at", nullable = false, length = 23)
  public Date getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "courses")
  public Set<Locations> getLocationses() {
    return this.locationses;
  }

  public void setLocationses(Set<Locations> locationses) {
    this.locationses = locationses;
  }

  @Column(name = "course_order", nullable = false)
  public int getCourseOrder() {
    return courseOrder;
  }

  public void setCourseOrder(int courseOrder) {
    this.courseOrder = courseOrder;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "deleted_time", length = 23)
  public Date getDeletedTime() {
    return deletedTime;
  }

  public void setDeletedTime(Date deletedTime) {
    this.deletedTime = deletedTime;
  }

}
