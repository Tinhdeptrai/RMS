package com.ptit.rms.model;
// Generated Jul 11, 2017 9:20:47 AM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Locations generated by hbm2java
 */
@Entity
@Table(name = "locations")
public class Locations {

  private int locationId;
  private Courses courses;
  private String locationName;
  private String description;
  private int locationOrder;
  private boolean isDeleted;
  private Date createdAt;
  private Date updatedAt;
  private int createdBy;
  private int updatedBy;
  private Set<Items> itemses = new HashSet<Items>(0);
  private Date deletedTime;

  public Locations() {
  }

  public Locations(int locationId, Courses courses, String locationName, String description, int locationOrder, boolean isDeleted, Date createdAt,
      Date updatedAt, int createdBy, int updatedBy, Set<Items> itemses, Date deletedTime) {
    super();
    this.locationId = locationId;
    this.courses = courses;
    this.locationName = locationName;
    this.description = description;
    this.locationOrder = locationOrder;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.createdBy = createdBy;
    this.updatedBy = updatedBy;
    this.itemses = itemses;
    this.deletedTime = deletedTime;
  }

  public Locations(int locationId, Courses courses, String locationName, int locationOrder, boolean isDeleted, Date createdAt, Date updatedAt,
      int createdBy, int updatedBy) {
    this.locationId = locationId;
    this.courses = courses;
    this.locationName = locationName;
    this.locationOrder = locationOrder;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.createdBy = createdBy;
    this.updatedBy = updatedBy;
  }

  public Locations(int locationId, Courses courses, String locationName, String description, int locationOrder, boolean isDeleted, Date createdAt,
      Date updatedAt, int createdBy, int updatedBy, Set<Items> itemses) {
    this.locationId = locationId;
    this.courses = courses;
    this.locationName = locationName;
    this.description = description;
    this.locationOrder = locationOrder;
    this.isDeleted = isDeleted;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.createdBy = createdBy;
    this.updatedBy = updatedBy;
    this.itemses = itemses;
  }

  @Id

  @Column(name = "location_id", unique = true, nullable = false)
  public int getLocationId() {
    return this.locationId;
  }

  public void setLocationId(int locationId) {
    this.locationId = locationId;
  }

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "course_id", nullable = false)
  public Courses getCourses() {
    return this.courses;
  }

  public void setCourses(Courses courses) {
    this.courses = courses;
  }

  @Column(name = "location_name", nullable = false)
  public String getLocationName() {
    return this.locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }

  @Column(name = "description")
  public String getDescription() {
    return this.description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  @Column(name = "location_order", nullable = false)
  public int getLocationOrder() {
    return this.locationOrder;
  }

  public void setLocationOrder(int locationOrder) {
    this.locationOrder = locationOrder;
  }

  @Column(name = "is_deleted", nullable = false)
  public boolean getIsDeleted() {
    return this.isDeleted;
  }

  public void setIsDeleted(boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "created_at", nullable = false, length = 23)
  public Date getCreatedAt() {
    return this.createdAt;
  }

  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "updated_at", nullable = false, length = 23)
  public Date getUpdatedAt() {
    return this.updatedAt;
  }

  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  @Column(name = "created_by", nullable = false)
  public int getCreatedBy() {
    return this.createdBy;
  }

  public void setCreatedBy(int createdBy) {
    this.createdBy = createdBy;
  }

  @Column(name = "updated_by", nullable = false)
  public int getUpdatedBy() {
    return this.updatedBy;
  }

  public void setUpdatedBy(int updatedBy) {
    this.updatedBy = updatedBy;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "locations")
  public Set<Items> getItemses() {
    return this.itemses;
  }

  public void setItemses(Set<Items> itemses) {
    this.itemses = itemses;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "deleted_time", length = 23)
  public Date getDeletedTime() {
    return deletedTime;
  }

  public void setDeletedTime(Date deletedTime) {
    this.deletedTime = deletedTime;
  }

}
